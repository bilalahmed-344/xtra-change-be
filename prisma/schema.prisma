
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id      String   @id @default(uuid())
  phoneNumber String    @unique
  phoneVerified   Boolean  @default(false)
  name        String?
  email       String?   @unique
  dob         DateTime?
  address     String?   
  gender     String?
  profilePic String? 
  idCardFrontSide String?    
  idCardBackSide String?    
  otpCode     String?
  otpExpiresAt DateTime?
  pin          String? 

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stripeCustomerId String?
  cards Card[]
  roundUpSetting  RoundUpSetting?
  roundUpTransactions  RoundUpTransaction[]
  plaidItems       PlaidItem[]

   

}

model Card {
  id           String   @id @default(uuid())
  userId       String
  stripeCardId String     @unique
  brand        String?
  last4        String?
  expMonth     Int?
  expYear      Int?
  isDefault    Boolean    @default(false) 
  status       CardStatus @default(ACTIVE)  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

// onDelete If a User is deleted  automatically delete all their Cards.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoundUpSetting {
  id          String   @id @default(uuid())
  userId      String   @unique
  enabled     Boolean  @default(true)

  paymentFrequency PaymentFrequency @default(DAILY)
  roundUpLimit     Float? 

  destination RoundUpDestination @default(SAVINGS)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlaidItem {
  id           String   @id @default(uuid())
  userId       String
  accessToken  String
  itemId       String
  institution  String?
  status       String?  // "active" etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

   user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts PlaidAccount[]
}

model PlaidAccount {
  id           String   @id @default(uuid())
  plaidItemId  String
  accountId    String   @unique
  name         String?
  mask         String?
  type         String?
  subtype      String?
  currentBalance Float?
  availableBalance Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

 plaidItem PlaidItem @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
 transactions PlaidTransaction[]
}
model PlaidTransaction {
  id          String   @id @default(uuid())
  plaidAccountId String
  transactionId String  @unique
  date        DateTime
  name        String
  amount      Float
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  account PlaidAccount @relation(fields: [plaidAccountId], references: [id], onDelete: Cascade)
  roundUp        RoundUpTransaction?
}

model RoundUpTransaction {
  id                 String           @id @default(uuid())
  userId             String
  plaidTransactionId String           @unique   
  roundUpAmount      Float
  status             RoundUpStatus    @default(PENDING)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // relations
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plaidTransaction   PlaidTransaction @relation(fields: [plaidTransactionId], references: [id], onDelete: Cascade)
}



enum RoundUpStatus {
  PENDING    // calculated but not yet moved
  INVESTED   // successfully transferred
  FAILED     // failed to process
}
enum PaymentFrequency {
  DAILY
  WEEKLY
  MONTHLY
}
enum RoundUpDestination {
  SAVINGS
  INVESTMENT
  CHARITY
}
enum CardStatus {
  ACTIVE
  INACTIVE
}